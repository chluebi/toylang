use std::str::FromStr;
use std::collections::HashMap;

use crate::parse_ast;

grammar;

// The entry point of the grammar
pub Grammar: parse_ast::Program = {
    <fs:Functions> => {
        parse_ast::Program {
            functions: fs
        }
    }
};

Functions: HashMap<String, parse_ast::Function> = {
    <fs:Functions> <f:Function> => {
        let mut funcs = fs;
        funcs.insert(f.name.clone(), f);
        funcs
    },
    <f:Function> => {
        let mut funcs = HashMap::new();
        funcs.insert(f.name.clone(), f);
        funcs
    }
};

Function: parse_ast::Function = {
    <start: @L> <name:Ident> "(" <args:Arguments> ")" <end: @R> "{" <body:Body> "}" => {
        parse_ast::Function {
            name: name,
            arguments: args,
            body: body,
            loc: start..end
        }
    }
};


Arguments: Vec<parse_ast::LocArgument> = {
    <arg:Argument> "," <args:Arguments> => {
        let mut args = args;
        args.insert(0, arg);
        args
    },
    <arg:Argument> => vec![arg],
    => vec![]
};


Argument: parse_ast::LocArgument = {
    <start: @L> <i:Ident> <end: @R> => parse_ast::LocArgument{
        argument: parse_ast::Argument::PositionalArgument(i),
        loc: start..end
    },
    <start: @L> "*"<i:Ident> <end: @R> => parse_ast::LocArgument{
        argument: parse_ast::Argument::Variadic(i),
        loc: start..end
    },
    <start: @L> <i:Ident> "=" <e:Expression> <end: @R> => parse_ast::LocArgument{
        argument: parse_ast::Argument::KeywordArgument(i, e),
        loc: start..end
    },
    <start: @L> "**"<i:Ident> <end: @R> => parse_ast::LocArgument{
        argument: parse_ast::Argument::KeywordVariadic(i),
        loc: start..end
    }
};


Body: parse_ast::Body = {
    <stmts:Statements> => {
        parse_ast::Body {
            statements: stmts
        }
    },
};


Statements: Vec<parse_ast::LocStatement> = {
    <stmt:Statement> ";" <stmts:Statements> => {
        let mut stmts = stmts;
        stmts.insert(0, stmt);
        stmts
    },
    <c_stmts:ControlFlow> <stmts:Statements> => {
        let mut c_stmts = c_stmts;
        c_stmts.extend(stmts);
        c_stmts
    },
    <stmt:Statement> => vec![stmt],
    => vec![]
};


ControlFlow: Vec<parse_ast::LocStatement> = {
    <start: @L> "if" <c:Expression> <end: @R> "{" <if_body:Body> "}"  => {
        vec![
            parse_ast::LocStatement {
                statement: parse_ast::Statement::IfElse {
                    condition: c,
                    if_body: if_body,
                    else_body: parse_ast::Body {
                        statements: vec![]
                    }
                },
                loc: start..end
            }
        ]
    },
    <start: @L> "if" <c:Expression> <end: @R> "{" <if_body:Body> "}" "else" "{" <else_body:Body> "}"  => {
        vec![
            parse_ast::LocStatement {
                statement: parse_ast::Statement::IfElse {
                    condition: c,
                    if_body: if_body,
                    else_body: else_body
                },
                loc: start..end
            }
        ]
    },
    <start: @L> "if" <c:Expression> <end: @R> "{" <if_body:Body> "}" "else" <next_cf:ControlFlow>  => {
        vec![
            parse_ast::LocStatement {
                statement: parse_ast::Statement::IfElse {
                    condition: c,
                    if_body: if_body,
                    else_body: parse_ast::Body {
                        statements: next_cf
                    }
                },
                loc: start..end
            }
        ]
    },
    <start: @L> "while" <c:Expression> <end: @R>  "{" <b:Body> "}" => {
        vec![
            parse_ast::LocStatement {
                statement: parse_ast::Statement::While {
                    condition: c,
                    body: b
                },
                loc: start..end
            }
        ]
    },
    <start: @L> "for" "(" <init:Statement> ";" <c:Expression> ";" <step:Statements> ")" <end: @R> "{" <body:Statements> "}" => {
        let mut stmts = vec![init];
        let mut body = body;
        body.extend(step);
        stmts.push(
            parse_ast::LocStatement {
                statement: parse_ast::Statement::While {
                    condition: c,
                    body: parse_ast::Body {
                        statements: body
                    }
                },
                loc: start..end
            }
        );
        stmts
    }
}


Statement: parse_ast::LocStatement = {
    <start: @L> <t:LHSExpression> "=" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t,
                expression: e
            },
            loc: start..end
        }
    },
    <start: @L> <t:LHSExpression> "[" "]" "=" <value:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::ListAppend {
                target: t,
                value: value
            },
            loc: start..end
        }
    },
    <start: @L> "return" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Return {
                expression: e
            },
            loc: start..end
        }
    },

    <start: @L> <t:LHSExpression> "+=" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Add,
                        left: Box::new(t),
                        right: Box::new(e)
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    },
    <start: @L> <t:LHSExpression> "-=" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Sub,
                        left: Box::new(t),
                        right: Box::new(e)
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    },
    <start: @L> <t:LHSExpression> "*=" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Mul,
                        left: Box::new(t),
                        right: Box::new(e)
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    },
    <start: @L> <t:LHSExpression> "/=" <e:Expression> <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Div,
                        left: Box::new(t),
                        right: Box::new(e)
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    },

    <start: @L> <t:LHSExpression> "++" <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Add,
                        left: Box::new(t),
                        right: Box::new(parse_ast::LocExpression { 
                            expression: parse_ast::Expression::IntLiteral(1),
                            loc: start..end
                        })
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    },
    <start: @L> <t:LHSExpression> "--" <end: @R> => {
        parse_ast::LocStatement {
            statement: parse_ast::Statement::Assignment {
                target: t.clone(),
                expression: parse_ast::LocExpression {
                    expression: parse_ast::Expression::BinaryOperation {
                        operator: parse_ast::BinOperator::Sub,
                        left: Box::new(t),
                        right: Box::new(parse_ast::LocExpression { 
                            expression: parse_ast::Expression::IntLiteral(1),
                            loc: start..end
                        })
                    },
                    loc: start..end
                }
            },
            loc: start..end
        }
    }
};

LHSExpression: parse_ast::LocExpression = {
    <start: @L> <id: Ident> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::Variable(id),
        loc: start..end
    },
    <start: @L> <indexed:LHSExpression> "[" <indexer: IndexExpression> "]" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::Indexing {
            indexed: Box::new(indexed), indexer: Box::new(indexer)
        },
        loc: start..end
    }
};


CallArguments: Vec<parse_ast::LocCallArgument> = {
    <arg:CallArgument> "," <args:CallArguments> => {
        let mut args = args;
        args.insert(0, arg);
        args
    },
    <arg:CallArgument> => vec![arg],
    => vec![]
};


CallArgument: parse_ast::LocCallArgument = {
    <start: @L> <e:Expression> <end: @R> => parse_ast::LocCallArgument{
        argument: parse_ast::CallArgument::PositionalArgument(e),
        loc: start..end
    },
    <start: @L> "*"<e:Expression> <end: @R> => parse_ast::LocCallArgument{
        argument: parse_ast::CallArgument::Variadic(e),
        loc: start..end
    },
    <start: @L> <i:Ident> "=" <e:Expression> <end: @R> => parse_ast::LocCallArgument{
        argument: parse_ast::CallArgument::KeywordArgument(i, e),
        loc: start..end
    },
    <start: @L> "**"<e:Expression> <end: @R> => parse_ast::LocCallArgument{
        argument: parse_ast::CallArgument::KeywordVariadic(e),
        loc: start..end
    }
};


Expression: parse_ast::LocExpression = {
    #[precedence(level="0")]
    Term,
    #[precedence(level="1")] #[assoc(side="left")]
    <start: @L> "(" <e:Expression> "," <elts: CommaSeperatedExpressions> ")" <end: @R> => {
        let mut elts = elts;
        elts.insert(0, e);
        return parse_ast::LocExpression {
            expression: parse_ast::Expression::TupleDefinition {elements: elts},
            loc: start..end
        };
    },
    <start: @L> "[" <elts: CommaSeperatedExpressions> "]" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::ListDefinition {elements: elts},
        loc: start..end
    },
    <start: @L> "{" <elts: CommaSeperatedMappings> "}" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::DictionaryDefinition {elements: elts},
        loc: start..end
    },
    <start: @L> <indexed: Expression> "[" <indexer: IndexExpression> "]" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::Indexing {
            indexed: Box::new(indexed), indexer: Box::new(indexer)
        },
        loc: start..end
    },
    <start: @L> <id:Ident> "(" <args:CallArguments> ")" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::FunctionCall {
            function_name: id,
            arguments: args
        },
        loc: start..end
    },
    #[precedence(level="2")] #[assoc(side="left")]
    <start: @L> "-" <e:Term> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::UnaryOperation {
            operator: parse_ast::UnOperator::Neg,
            expression: Box::new(e),
        },
        loc: start..end
    },
    <start: @L> "!" <e:Term> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::UnaryOperation {
            operator: parse_ast::UnOperator::Not,
            expression: Box::new(e),
        },
        loc: start..end
    },
    <start: @L> "?" <e:Term> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::UnaryOperation {
            operator: parse_ast::UnOperator::Length,
            expression: Box::new(e),
        },
        loc: start..end
    },
    #[precedence(level="3")] #[assoc(side="left")]
    <start: @L> <l:Expression> "*" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Mul,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "/" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Div,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "%" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Mod,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    #[precedence(level="4")] #[assoc(side="left")]
    <start: @L> <l:Expression> "+" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Add,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "-" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Sub,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    #[precedence(level="5")] #[assoc(side="left")]
    <start: @L> <l:Expression> "++" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::ListConcat,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    #[precedence(level="6")] #[assoc(side="left")]
    <start: @L> <l:Expression> "??" <r:Type> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::Typecheck {
            expression: Box::new(l),
            expected_type: r
        },
        loc: start..end
    },
    #[precedence(level="7")] #[assoc(side="left")]
    <start: @L> <l:Expression> "&&" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::And,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    #[precedence(level="8")] #[assoc(side="left")]
    <start: @L> <l:Expression> "||" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Or,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    #[precedence(level="9")] #[assoc(side="left")]
    <start: @L> <l:Expression> "==" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Eq,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "!=" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Neq,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "<" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Lt,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> ">" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Gt,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> "<=" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Leq,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
    <start: @L> <l:Expression> ">=" <r:Expression> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BinaryOperation {
            operator: parse_ast::BinOperator::Geq,
            left: Box::new(l),
            right: Box::new(r)
        },
        loc: start..end
    },
}

IndexExpression: parse_ast::LocExpression = {
    Expression
}

Term: parse_ast::LocExpression = {
    <start: @L> "true" <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::BoolLiteral(true),
        loc: start..end
    },
    <start: @L> "false" <end: @R> => parse_ast::LocExpression { 
        expression: parse_ast::Expression::BoolLiteral(false),
        loc: start..end
    },
    <start: @L> <n:Num> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::IntLiteral(n),
        loc: start..end
    },
    <start: @L> <s:String> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::StringLiteral(s),
        loc: start..end
    },
    <start: @L> <id: Ident> <end: @R> => parse_ast::LocExpression {
        expression: parse_ast::Expression::Variable(id),
        loc: start..end
    },
    "(" <e: Expression> ")" => e
}


CommaSeperatedExpressions: Vec<parse_ast::LocExpression> = {
    <exp:Expression> "," <exps:CommaSeperatedExpressions> => {
        let mut exps = exps;
        exps.insert(0, exp);
        exps
    },
    <exp:Expression> => vec![exp],
    => vec![]
}

CommaSeperatedMappings: Vec<(parse_ast::LocExpression, parse_ast::LocExpression)> = {
    <m:Mapping> "," <mappings:CommaSeperatedMappings> => {
        let mut mappings = mappings;
        mappings.insert(0, m);
        mappings
    },
    <m:Mapping> => vec![m],
    => vec![]
}

Mapping: (parse_ast::LocExpression, parse_ast::LocExpression) = {
    <key:Expression> ":" <value:Expression> => (key, value)
}

Type: parse_ast::Type = {
    "int" => parse_ast::Type::Int,
    "bool" => parse_ast::Type::Bool,
    "string" => parse_ast::Type::String,
    "tuple" => parse_ast::Type::Tuple,
    "list" => parse_ast::Type::List,
    "dict" => parse_ast::Type::Dict
}

Num: i64 = <s:NumString> => i64::from_str(s).unwrap();

String: String = {
    <s:StringString> => s[1..s.len() - 1].to_string(),
};


Ident: String = {
    <id:IdentString> => id.to_string(),
};


match { 
    r#"[0-9]+"# => NumString,
    r#"[a-zA-Z_][a-zA-Z0-9_]*"# => IdentString,

    ";",
    ":",
    "(",
    ")",
    "[",
    "]",
    "{",
    "}",
    ",",

    "**",

    "if",
    "else",
    "while",
    "for",
    "return",
    "true",
    "false",

    "int",
    "bool",
    "string",
    "tuple",
    "list",
    "dict",

    "=",
    "+",
    "-",
    "*",
    "/",
    "%",
    "++",
    "--",
    "?",
    "??",
    "&&",
    "||",
    "+=",
    "-=",
    "*=",
    "/=",
    "<",
    ">",
    ">=",
    "<=",
    "==",
    "!=",
    "!",


    "\""
} else {
    r#"\"[^\"]*\""# => StringString
}


